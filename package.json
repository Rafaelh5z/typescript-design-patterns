{
  "name": "typescript-design-patterns",
  "version": "1.0.0",
  "description": "Complete guide to design patterns implemented in TypeScript with practical examples and detailed explanations",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "tsc --watch",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "clean": "rm -rf dist",
    "run:pattern": "ts-node",
    "run:creational": "echo 'Available Creational Patterns:' && echo '- abstractFactory, builder, factoryMethod, prototype, singleton'",
    "run:structural": "echo 'Available Structural Patterns:' && echo '- adapter, composite, decorator, facade'",
    "run:behavioral": "echo 'Available Behavioral Patterns:' && echo '- command, iterator, mediator, observer, state, strategy, templateMethod'",
    "demo:abstract-factory": "ts-node src/creationalPatterns/abstractFactory/index.ts",
    "demo:builder": "ts-node src/creationalPatterns/builder/index.ts",
    "demo:factory-method": "ts-node src/creationalPatterns/factoryMethod/index.ts",
    "demo:prototype": "ts-node src/creationalPatterns/prototype/index.ts",
    "demo:singleton": "ts-node src/creationalPatterns/singleton/index.ts",
    "demo:adapter": "ts-node src/structuralPatterns/adapter/index.ts",
    "demo:composite": "ts-node src/structuralPatterns/composite/index.ts",
    "demo:decorator": "ts-node src/structuralPatterns/decorator/index.ts",
    "demo:facade": "ts-node src/structuralPatterns/facade/index.ts",
    "demo:command": "ts-node src/behavioralPatterns/command/index.ts",
    "demo:iterator": "ts-node src/behavioralPatterns/iterator/index.ts",
    "demo:mediator": "ts-node src/behavioralPatterns/mediator/index.ts",
    "demo:observer": "ts-node src/behavioralPatterns/observer/index.ts",
    "demo:state": "ts-node src/behavioralPatterns/state/index.ts",
    "demo:strategy": "ts-node src/behavioralPatterns/strategy/index.ts",
    "demo:template-method": "ts-node src/behavioralPatterns/templateMethod/index.ts"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Rafaelh5z/typescript-design-patterns-.git"
  },
  "keywords": [
    "typescript",
    "design-patterns",
    "software-engineering",
    "programming",
    "oop",
    "gang-of-four",
    "creational-patterns",
    "structural-patterns",
    "behavioral-patterns",
    "software-design"
  ],
  "author": "Rafael H <rafael_h5z@hotmail.es>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Rafaelh5z/typescript-design-patterns-/issues"
  },
  "homepage": "https://github.com/Rafaelh5z/typescript-design-patterns-#readme",
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "@types/node": "^24.0.12",
    "@typescript-eslint/eslint-plugin": "^8.36.0",
    "@typescript-eslint/parser": "^8.36.0",
    "eslint": "^9.30.1",
    "jest": "^30.0.4",
    "ts-jest": "^29.4.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.36.0"
  }
}
